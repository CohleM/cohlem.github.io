<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CohleM</title>
    <link>https://cohlem.github.io/</link>
    <description>Recent content on CohleM</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 08 Dec 2024 21:57:23 +0545</lastBuildDate><atom:link href="https://cohlem.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Backpropagation from scratch</title>
      <link>https://cohlem.github.io/sub-notes/backpropagation-from-scratch/</link>
      <pubDate>Sun, 08 Dec 2024 21:57:23 +0545</pubDate>
      
      <guid>https://cohlem.github.io/sub-notes/backpropagation-from-scratch/</guid>
      <description>Source: The spelled-out intro to neural networks and backpropagation: building micrograd
Backpropagation on paper It implements backpropagation for two arithmetic operation (multiplication and addition) which are quite straightforward.
Implementation is for this equation.
a = Value(2.0, label=&amp;#39;a&amp;#39;) b = Value(-3.0, label=&amp;#39;b&amp;#39;) c = Value(10.0, label=&amp;#39;c&amp;#39;) e = a*b; e.label = &amp;#39;e&amp;#39; d = e + c; d.label = &amp;#39;d&amp;#39; f = Value(-2.0, label=&amp;#39;f&amp;#39;) L = d * f; L.label = &amp;#39;L&amp;#39; L The most important thing to note here is the gradient accumulation step (shown at the bottom-left).</description>
    </item>
    
    <item>
      <title>Deep Learning Notes</title>
      <link>https://cohlem.github.io/notes/deep-learning-notes/</link>
      <pubDate>Sun, 08 Dec 2024 21:57:23 +0545</pubDate>
      
      <guid>https://cohlem.github.io/notes/deep-learning-notes/</guid>
      <description>Backpropagation from scratch </description>
    </item>
    
    <item>
      <title>Why we add regularization in loss function</title>
      <link>https://cohlem.github.io/sub-notes/why-we-need-regularization/</link>
      <pubDate>Sun, 08 Dec 2024 21:57:23 +0545</pubDate>
      
      <guid>https://cohlem.github.io/sub-notes/why-we-need-regularization/</guid>
      <description>it penalizes the weights, and prioritizes uniformity in weights. How does it penalize the weights? Now when we do the backprop and gradient descent.
The gradient of loss w.r.t some weights become as we can see it penalizes the weight by reducing the weights&amp;rsquo;s value by some higher amount compared to the some minimial weight update when we only used loss function.
So overall, the model tries to balance the Loss (L) as well as keep the weights small.</description>
    </item>
    
    <item>
      <title>Backpropagation from scratch</title>
      <link>https://cohlem.github.io/posts/backpropogation/</link>
      <pubDate>Sat, 12 Aug 2023 21:57:23 +0545</pubDate>
      
      <guid>https://cohlem.github.io/posts/backpropogation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Using Genetic Algorithm for Weights Optimization</title>
      <link>https://cohlem.github.io/posts/using-genetic-algorithm-for-weights-optimization/</link>
      <pubDate>Sat, 12 Aug 2023 21:57:23 +0545</pubDate>
      
      <guid>https://cohlem.github.io/posts/using-genetic-algorithm-for-weights-optimization/</guid>
      <description>BackStory This is a simple fun little project that I did almost a year ago, At that time I used to see a lot of CodeBullet&amp;rsquo;s videos and wanted to learn the gist behind these evolutionary algorithms, and I can&amp;rsquo;t get into my head if I don&amp;rsquo;t do it from scratch so I wanted to implement this project from scratch. At that time, I wanted to document the learning and the implementation process, I even thought of making a youtube video about this topic but could not complete it, at that time, I had made some video animations about this process but could not complete it because I started doing something else and when I can back it was already too much mess and could not complete the video animations, but I&amp;rsquo;ll include the video animations that I had made earlier.</description>
    </item>
    
    <item>
      <title>Fine-tuning LLM vs In-context learning</title>
      <link>https://cohlem.github.io/posts/llmvsincontext/</link>
      <pubDate>Sat, 22 Jul 2023 20:40:19 +0545</pubDate>
      
      <guid>https://cohlem.github.io/posts/llmvsincontext/</guid>
      <description>This is my experience and experimentation that I did while building a product for the use case of using LLMs for our own data for question answering. If you&amp;rsquo;re doing something similar, this could be of some help.
The most commonly used methods while using LLMs with our own data were typically
Fine-tuning the model with your own data Using Retrieval Augmented Generation (RAG) techniques Fine-tuning the model with your own data This is the initial method and follows the general structure of training a model</description>
    </item>
    
    
    <item>
      <title>Maximum likelihood estimate as loss function</title>
      <link>https://cohlem.github.io/sub-notes/maximum-likelihood-estimate-as-loss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cohlem.github.io/sub-notes/maximum-likelihood-estimate-as-loss/</guid>
      <description> </description>
    </item>
    
    
    <item>
      <title>TITLE</title>
      <link>https://cohlem.github.io/sub-notes/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cohlem.github.io/sub-notes/template/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
